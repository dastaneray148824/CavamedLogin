@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@implements IDisposable


<div class="topbar d-flex justify-content-end align-items-center px-3 shadow-sm" style="height:40px; background-color:#f8f9fa;">
    <AuthorizeView>
        <Authorized>
            <div class="nav-item px-2">
                <NavLink class="nav-link" href="Account/Manage">
                    <span class="bi bi-person-fill" aria-hidden="true"></span>
                    @context.User.Identity?.Name
                </NavLink>
            </div>
            <div class="nav-item px-2">
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="btn btn-link nav-link p-0">
                        <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                    </button>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item px-2">
                <NavLink class="nav-link" href="Account/Register">
                    <span class="bi bi-person-plus" aria-hidden="true"></span> Register
                </NavLink>
            </div>
            <div class="nav-item px-2">
                <NavLink class="nav-link" href="Account/Login">
                    <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
                </NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>
<article class="content px-4">
    @Body
</article>
@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}