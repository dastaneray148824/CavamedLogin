@page "/Account/Login"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using CavamedLogin.Data
@using DTO
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Login> L
@inject IMemoryCache Cache
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS


@inject CavamedLogin.Services.Security.ILoginAttemptStore AttemptStore
@inject CavamedLogin.Services.Captcha.ICaptchaVerifier CaptchaVerifier
@inject Microsoft.Extensions.Options.IOptions<CavamedLogin.Services.Captcha.CaptchaOptions> CaptchaOptions


<PageTitle>Giriş Yap</PageTitle>

<div class="login-container">
    <div class="login-form-panel">
        <!-- Kartı geniş yapıyoruz ki iki sütun sığsın -->
        <div class="login-card login-card-wide">


            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger text-center" role="alert">
                    @errorMessage
                </div>
            }

            <!-- EMAIL FORM -->
            <EditForm Model="@emailInput"
                      FormName="EmailForm"
                      OnValidSubmit="HandleEmailStep"
                      style="@(showPasswordstep ? "display:none" : "block")">

                <DataAnnotationsValidator />

                <!-- İKİ SÜTUN: Sol (logo+başlık+metin) | Sağ (input+buton) -->
                <div class="two-col-layout">
                    <div class="left-pane">
                        <!-- Üstte logo -->
                        <img src="image/cavamedlogo.png" alt="CAVAMED" class="brand-logo" />
                        <h1 class="welcome-title">@L["Sign In"]</h1>
                        <p class="left-desc">
                            @L["Gmail Info"]
                        </p>
                    </div>

                    <div class="right-pane">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="emailInput.Email"
                                       id="email"
                                       class="form-control pw-input"
                                       autocomplete="username"
                                       placeholder="e-posta" />
                            <label for="email">@L["EMail"]</label>
                            <ValidationMessage For="@(() => emailInput.Email)" class="text-danger" />
                        </div>

                        @if (RequireCaptchaEmailStep)
                        {
                            <!-- Token'ı modele yazmak için hidden input -->
                            <!-- Turnstile widget -->
                            <div class="cf-turnstile"
                                 data-sitekey="@CaptchaOptions.Value.SiteKey"
                                 data-callback="cavamed.onTurnstileSuccess"
                                 data-expired-callback="cavamed.onTurnstileExpired">
                            </div>
                        }

                        <div class="pw-actions">
                            <a class="forgot-link" href="/Account/Register">@L["Register"]</a>
                            <button id="btnEmailNext" type="submit"
                                    class="btn next-btn">
                                @L["Next"]
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>

            <!-- PASSWORD FORM -->
            <EditForm Model="@loginInput"
                      FormName="PasswordForm"
                      OnValidSubmit="HandlePasswordStep"
                      style="@(showPasswordstep ? "block" : "display:none")">

                <DataAnnotationsValidator />


                <!-- İKİ SÜTUN: Sol (karşılama+email pili) | Sağ (şifre alanı) -->
                <div class="password-layout">
                    <div class="pw-left">
                        <img src="image/cavamedlogo.png" alt="CAVAMED" class="brand-logo" />
                        <h1 class="welcome-title">@L["WelcomeBack"]</h1>

                        <div class="email-pill">
                            <i class="fa-solid fa-user"></i>
                            <span>@loginInput.Email</span>
                            <a href="/Account/Login" class="change-user-link" style="margin-left:8px;">@L["Change"]</a>
                        </div>
                    </div>

                    <div class="pw-right">
                        <p class="verify-hint">@L["To continue, first verify your identity"]</p>

                        <div class="form-floating mb-4">
                            <InputText @bind-Value="loginInput.Password"
                                       id="password"
                                       type="password"
                                       class="form-control pw-input"
                                       autocomplete="current-password"
                                       placeholder="şifre" />
                            <label for="password">@L["Password"]</label>

                        </div>

                        <div class="form-check mb-4">
                            <InputCheckbox @bind-Value="loginInput.RememberMe" id="rememberMe" class="form-check-input" />
                            <label for="rememberMe" class="form-check-label">@L["RememberMe"]</label>
                        </div>

                        <div class="pw-actions">
                            <a class="forgot-link" href="/Account/ForgotPassword">@L["Forget Password"]</a>
                            <button id="btnEmailNext" type="submit" class="btn next-btn">
                                @L["Next"]
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>

        </div>

        <div class="culture-footer">
            <CultureSelector />

        </div>
    </div>
</div>
<script src="js/captcha.js"></script>
<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>

@code {

    DTO.LoginDTO dto = new() { EMail = "", Sifre = "", LoginType = Enums.LoginType.Portal, BrowserEngine = Enums.BrowserEngine.Other, BrowserName = Enums.BrowserName.Other, UserAgent = "", KullaniciIP = "8.8.8.8", KullaniciCihaz = new DTO.KullaniciCihaz { Id = Tools.IdFactory.GetId, DeviceName = Enums.DeviceName.Android, DeviceType = Enums.DeviceType.Phone }, Lang = Enums.Lang.tr, };



    private const int EmailFailThreshold = 3; // 3 yanlış → CAPTCHA
    private string AttemptKey =>
        HttpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString() ?? "unknown";
    private bool RequireCaptchaEmailStep => AttemptStore.Get(AttemptKey) >= EmailFailThreshold;
    private bool _showError;
    private string? _errorText;


    private bool showPasswordstep = false;
    private string? errorMessage;
    private InputText? passwordInput;

    [SupplyParameterFromForm(FormName = "EmailForm")]
    public EmailInputModel emailInput { get; set; } = new();

    [SupplyParameterFromForm(FormName = "PasswordForm")]
    private LoginInputModel loginInput { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private bool _resetAfterRender;
    protected override Task OnAfterRenderAsync(bool first)
    {
        if (_resetAfterRender)
        {
            _resetAfterRender = false;
            return JS.InvokeVoidAsync("cavamed.resetCaptcha").AsTask();
        }
        if (_showError && _errorText is not null)
        {
            JS.InvokeVoidAsync("alert", _errorText);
            _showError = false;              // tekrar göstermesin
            _errorText = null;
        }
        return Task.CompletedTask;
    }


    private string? GetClientIp()
    {
        var ctx = HttpContextAccessor.HttpContext;
        var fwd = ctx?.Request?.Headers?["X-Forwarded-For"].ToString();
        if (!string.IsNullOrWhiteSpace(fwd))
        {
            // "client, proxy1, proxy2" → ilkini al
            var first = fwd.Split(',')[0].Trim();
            if (!string.IsNullOrWhiteSpace(first)) return first;
        }
        return ctx?.Connection?.RemoteIpAddress?.ToString();
    }


    // ADIM 1 → e-posta girilince
    private async Task HandleEmailStep()
    {
        errorMessage = null;

        var attemptKey = AttemptKey;
        var needCaptcha = AttemptStore.Get(attemptKey) >= EmailFailThreshold;

        // 1) CAPTCHA gerekiyorsa: token'ı formdan al ve doğrula
        if (needCaptcha)
        {
            // Turnstile’ın kendi input'u
            var form = HttpContextAccessor.HttpContext?.Request?.Form;
            var token = form?["cf-turnstile-response"].FirstOrDefault();

            var ip = GetClientIp();
            var captchaOk = false;

            if (!string.IsNullOrWhiteSpace(token))
            {
                captchaOk = await CaptchaVerifier.VerifyAsync(token, ip);
            }

            // Token tek kullanımlık → sonucu ne olursa olsun reset'i render sonrasına ertele
            _resetAfterRender = true;   // <-- OnAfterRenderAsync'te cavamed.resetCaptcha çağırılacak
            StateHasChanged();          // yeni render tetikle

            if (!captchaOk)
            {
                errorMessage = L["SecurityCheckFailed"];
                return;
            }
        }

        // 2) E-posta zorunlu
        if (string.IsNullOrWhiteSpace(emailInput.Email))
        {
            errorMessage = L["EmailRequired"];
            return;
        }

        // 3) Kullanıcıyı bul
        var user = await UserManager.FindByEmailAsync(emailInput.Email);
        if (user is null)
        {
            var count = AttemptStore.Increment(attemptKey);

            errorMessage = count >= EmailFailThreshold
                ? L["EmailNotVerifiedWithCaptcha"]
                : L["Bu e-posta adresi ile kayıtlı bir kullanıcı bulunamadı."];

            return; // (CAPTCHA reset bayrağı zaten set edildi)
        }

        // 4) Doğru e-posta → CAPTCHA eşiğini sıfırla
        AttemptStore.Reset(attemptKey);

        // 5) Nonce üret ve 5 dk cache'le
        var nonce = Guid.NewGuid().ToString("N");
        Cache.Set(nonce, emailInput.Email, TimeSpan.FromMinutes(5));

        // 6) Cookie'ye nonce yaz (5 dk)
        var context = HttpContextAccessor.HttpContext!;
        context.Response.Cookies.Append("login_nonce", nonce, new CookieOptions
            {
                HttpOnly = true,
                Secure = true,
                SameSite = SameSiteMode.Lax,
                Expires = DateTimeOffset.UtcNow.AddMinutes(5)
            });

        // 7) Password adımına geç
        loginInput.Email = emailInput.Email;
        showPasswordstep = true;
    }


    // ADIM 2 → şifre girilince
    private async Task HandlePasswordStep()
    {
        if (string.IsNullOrEmpty(loginInput.Password))
        {
            errorMessage = L["PasswordRequired"];
            showPasswordstep = true;
            return;
        }
        ;
        var context = HttpContextAccessor.HttpContext!;
        if (!context.Request.Cookies.TryGetValue("login_nonce", out var nonce))
        {
            errorMessage = "Oturum süresi doldu. Tekrar deneyin.";
            showPasswordstep = false;
            return;
        }

        if (!Cache.TryGetValue(nonce, out string email))
        {
            errorMessage = "Oturum süresi doldu. Tekrar deneyin.";
            showPasswordstep = false;
            return;
        }


        loginInput.Email = email;

        //TODO: burada pass ile ilgili hatalar gerekli veya yanlışı yönet eğer gerekli veya yanlış ise daha datayı göndermeden burada hata ver ve işlemi bitir
        try
        {
            dto.EMail = loginInput.Email;
            dto.Sifre = loginInput.Password;
            GlobalValues.GlobalVariables._loginDTO = new Tools.RESTApi().GetResponse<LoginDTO>("", "", "Kullanici", "DoLogin", JsonConvert.SerializeObject(dto));
            Cache.Remove(nonce);
            context.Response.Cookies.Delete("login_nonce");
            NavigationManager.NavigateTo(ReturnUrl ?? "/Account/Manage");
        }
        catch (Exception ex)
        {
            _errorText = $"Hata oluştu: {ex.Message}";
            _showError = true;
            StateHasChanged(); // render tetikle
            //Snackbar.Add($"Hata oluştu: {ex.Message}", MudBlazor.Severity.Error);
            // burada verilecek hata zaten RestApi de verilecek!
            return; //kodu bitircek
        }

        //var result = await SignInManager.PasswordSignInAsync(loginInput.Email, loginInput.Password, loginInput.RememberMe, lockoutOnFailure: false);

        // if (result.Succeeded)
        // {
        //     Cache.Remove(nonce);
        //     context.Response.Cookies.Delete("login_nonce");

        //     NavigationManager.NavigateTo(ReturnUrl ?? "/Account/Manage");
        // }
        // else if (string.IsNullOrWhiteSpace(loginInput.Password))
        // {
        //     errorMessage = L["PasswordRequired"]; // resx key
        //     showPasswordstep = true;
        //     return;
        // }
        // else
        // {
        //     errorMessage = L["Şifre hatalı."];
        //     showPasswordstep = true;
        // }
    }


    private async Task HandleSubmitAsync()
    {
        try
        {
            // ...iş mantığın
        }
        catch (Exception ex)
        {
            _errorText = $"Hata oluştu: {ex.Message}";
            _showError = true;
            StateHasChanged(); // render tetikle
        }
    }

    public class EmailInputModel
    {

        public string Email { get; set; } = string.Empty;

        public string? CaptchaToken { get; set; } // sadece eşik aşıldıysa doldurulur
    }

    public class LoginInputModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public bool RememberMe { get; set; }
    }

}
