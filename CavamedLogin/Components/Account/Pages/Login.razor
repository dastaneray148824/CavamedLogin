@page "/Account/Login"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using CavamedLogin.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.AspNetCore.Http
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Login> L
@inject IMemoryCache Cache
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Giriş Yap</PageTitle>

<div class="login-container">
    <div class="login-form-panel">
        <!-- Kartı geniş yapıyoruz ki iki sütun sığsın -->
        <div class="login-card login-card-wide">

            @if (showLoading)
            {
                <div class="top-loading-bar">
                    <div class="top-loading-bar__inner"></div>
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger text-center" role="alert">
                    @errorMessage
                </div>
            }

            <!-- EMAIL FORM -->
            <EditForm Model="@emailInput"
                      FormName="EmailForm"
                      OnValidSubmit="HandleEmailStep"
                      style="@(showPasswordstep ? "display:none" : "block")">

                <DataAnnotationsValidator />

                <!-- İKİ SÜTUN: Sol (logo+başlık+metin) | Sağ (input+buton) -->
                <div class="two-col-layout">
                    <div class="left-pane">
                        <!-- Üstte logo -->
                        <img src="image/cavamedlogo.png" alt="CAVAMED" class="brand-logo" />
                        <h1 class="welcome-title">@L["Sign In"]</h1>
                        <p class="left-desc">
                           @L["Gmail Info"]
                        </p>
                    </div>

                    <div class="right-pane">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="emailInput.Email"
                                       id="email"
                                       class="form-control pw-input"
                                       autocomplete="username"
                                       placeholder="e-posta" />
                            <label for="email">@L["EMail"]</label>
                            <ValidationMessage For="@(() => emailInput.Email)" class="text-danger" />
                        </div>

                        <div class="pw-actions">
                            <a class="forgot-link" href="/Account/Register">@L["Register"]</a>
                            <button type="submit" class="btn next-btn">@L["Next"]</button>
                        </div>
                    </div>
                </div>
            </EditForm>

            <!-- PASSWORD FORM -->
            <EditForm Model="@loginInput"
                      FormName="PasswordForm"
                      OnValidSubmit="HandlePasswordStep"
                      style="@(showPasswordstep ? "block" : "display:none")">

                <DataAnnotationsValidator />

                <!-- İKİ SÜTUN: Sol (karşılama+email pili) | Sağ (şifre alanı) -->
                <div class="password-layout">
                    <div class="pw-left">
                        <img src="image/cavamedlogo.png" alt="CAVAMED" class="brand-logo" />
                        <h1 class="welcome-title">@L["WelcomeBack"]</h1>

                        <div class="email-pill">
                            <i class="fa-solid fa-user"></i>
                            <span>@loginInput.Email</span>
                            <a href="/Account/Login" class="change-user-link" style="margin-left:8px;">@L["Change"]</a>
                        </div>
                    </div>

                    <div class="pw-right">
                        <p class="verify-hint">@L["To continue, first verify your identity"]</p>

                        <div class="form-floating mb-4">
                            <InputText @bind-Value="loginInput.Password"
                                       id="password"
                                       type="password"
                                       class="form-control pw-input"
                                       autocomplete="current-password"
                                       placeholder="şifre" />
                            <label for="password">@L["Password"]</label>
                            <ValidationMessage For="@(() => loginInput.Password)" class="text-danger" />
                        </div>

                        <div class="form-check mb-4">
                            <InputCheckbox @bind-Value="loginInput.RememberMe" id="rememberMe" class="form-check-input" />
                            <label for="rememberMe" class="form-check-label">@L["RememberMe"]</label>
                        </div>

                        <div class="pw-actions">
                            <a class="forgot-link" href="/Account/ForgotPassword">@L["Forget Password"]</a>
                            <button type="submit" class="btn next-btn">@L["LoginButton"]</button>
                        </div>
                    </div>
                </div>
            </EditForm>

        </div>

        <div class="culture-footer">
            <CultureSelector />
        </div>
    </div>
</div>


@code {
    private bool showPasswordstep = false;
    private string? errorMessage;
    private InputText? passwordInput;

    private bool showLoading = false;

    [SupplyParameterFromForm(FormName = "EmailForm")]
    public EmailInputModel emailInput { get; set; } = new();

    [SupplyParameterFromForm(FormName = "PasswordForm")]
    private LoginInputModel loginInput { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // ADIM 1 → e-posta girilince
    private async Task HandleEmailStep()
    {
        errorMessage = null;

        // 1) Loading bar aç
        showLoading = true;
        StateHasChanged();

        try
        {
            // 2) Kullanıcıyı bul
            var user = await UserManager.FindByEmailAsync(emailInput.Email);
            if (user is null)
            {
                errorMessage = "Bu e-posta adresi ile kayıtlı bir kullanıcı bulunamadı.";
                return;
            }

            // 3) Nonce üret ve sakla
            var nonce = Guid.NewGuid().ToString("N");
            Cache.Set(nonce, emailInput.Email, TimeSpan.FromMinutes(5));

            // 4) Cookie'ye nonce yaz
            var context = HttpContextAccessor.HttpContext!;
            context.Response.Cookies.Append("login_nonce", nonce, new CookieOptions
                {
                    HttpOnly = true,
                    Secure = true,
                    SameSite = SameSiteMode.Lax,
                    Expires = DateTimeOffset.UtcNow.AddMinutes(5)
                });

            // 5) Password adımına geç
            loginInput.Email = emailInput.Email;
            showPasswordstep = true;
            await Task.Delay(300);
            
            
        }
        finally
        {
            // 6) Loading bar kapat (başarılı/başarısız her durumda)
            showLoading = false;
            StateHasChanged();
        }
    }


    // ADIM 2 → şifre girilince
    private async Task HandlePasswordStep()
    {
        var context = HttpContextAccessor.HttpContext!;
        if (!context.Request.Cookies.TryGetValue("login_nonce", out var nonce))
        {
            errorMessage = "Oturum süresi doldu. Tekrar deneyin.";
            showPasswordstep = false;
            return;
        }

        if (!Cache.TryGetValue(nonce, out string email))
        {
            errorMessage = "Oturum süresi doldu. Tekrar deneyin.";
            showPasswordstep = false;
            return;
        }

        loginInput.Email = email;

        var result = await SignInManager.PasswordSignInAsync(loginInput.Email, loginInput.Password, loginInput.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Cache.Remove(nonce);
            context.Response.Cookies.Delete("login_nonce");

            NavigationManager.NavigateTo(ReturnUrl ?? "/Account/Manage");
        }
        else
        {
            errorMessage = "Şifre hatalı.";
            showPasswordstep = true;
        }
    }

    public class EmailInputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
    }

    public class LoginInputModel
    {
        public string Email { get; set; } = "";
        [Required]
        public string Password { get; set; } = "";
        public bool RememberMe { get; set; }
    }
}
