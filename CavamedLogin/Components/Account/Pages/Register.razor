@page "/Account/Register"
@layout EmptyLayout
@using Microsoft.Extensions.Localization
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CavamedLogin.Data

@inject IStringLocalizer<Login> L
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>


<div class="login-container">

    <!-- SOL TARAF: KATMANLI FOTOĞRAF PANELİ -->
    <div class="login-image-panel">
        <!-- Fotoğraf katmanları -->
        <div class="bg-layer bg-layer-1"></div>
        <div class="bg-layer bg-layer-2"></div>
        <div class="bg-layer bg-layer-3"></div>

    </div>

    <!-- SAĞ TARAF: FORM PANELİ (Aynı kalabilir) -->
    <div class="login-form-panel">
        <div class="login-card">
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register" novalidate>
                <DataAnnotationsValidator />
                <img src="image/cavamedlogo.png" alt="CAVAMED" class="brand-logo" />
                <h1 class="welcome-title">@L["WelcomeBack"]</h1>
                <p class="subtitle fade-in-up delay-1">@L["Continue by registering"]</p>

                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-3 fade-in-up delay-2">
                    <InputText id="name" @bind-Value="Input.Name" autocomplete="name" class="form-control" aria-required="true" placeholder="Adınız" />
                    <label for="name" class="form-label">@L["Name"]</label>
                    <ValidationMessage For="() => Input.Name" class="text-danger small" />
                </div>

                <div class="form-floating mb-3 fade-in-up delay-2">
                    <InputText id="surname" @bind-Value="Input.Surname" autocomplete="surname" class="form-control" aria-required="true" placeholder="Soyadınız" />
                    <label for="surname" class="form-label">@L["Surname"]</label>
                    <ValidationMessage For="() => Input.Surname" class="text-danger small" />
                </div>

                <div class="form-floating mb-3 fade-in-up delay-2">
                    <InputText id="email" @bind-Value="Input.Email" autocomplete="email" class="form-control" aria-required="true" placeholder="E-posta" />
                    <label for="email" class="form-label">@L["Email"]</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger small" />
                </div>

                <div class="form-floating mb-4 fade-in-up delay-3">
                    <InputText id="password" type="password" @bind-Value="Input.Password" autocomplete="password" class="form-control" aria-required="true" placeholder="Şifre" />
                    <label for="password" class="form-label">@L["Password"]</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger small" />
                </div>
                <div class="form-floating mb-4 fade-in-up delay-3">
                    <InputText id="confirmpassword" type="password" @bind-Value="Input.ConfirmPassword" autocomplete="confirmpassword" class="form-control" aria-required="true" placeholder="Şifre Tekrar" />
                    <label for="confirmpassword" class="form-label">@L["ConfirmPassword"]</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger small" />
                </div>

                <div class="d-grid fade-in-up delay-5">
                    <button type="submit" class="btn btn-primary btn-lg login-btn">@L["Register"]</button>
                </div>
                <br />
                <p>
                    <a href="/Account/Login">@L["LoginButton"]</a>
                </p>
            </EditForm>
        </div>
        <CultureSelector />
    </div>
</div>
@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
            "Account/RegisterConfirmation",
            new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo("/Account/Login");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
            $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Name")]
        public string Name { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Surname")]
        public string Surname { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
    }
